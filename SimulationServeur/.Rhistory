library(SimulationServeur)
library(SimulationServeur)
main()
main <- function() {
queue <- c(0,0,0)
launched <- c(0,0,0)
served <- c(0,0,0)
cancelled <- 0
print(sum(queue))
}
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
print(paste("Time :", time.current))
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
main()
served[i-1] <- served[i-1] + 1
service(time.current)
if (prioritySelector < priorities[0]) {
nextQuery.priority <- 1
} else if (prioritySelector < (priorities[0] + priorities[1])) {
nextQuery.priority <- 2
} else {
nextQuery.priority <- 3
}
nextQuery.time <- currentTime + rexp(1, lambda)
nextQuery.time <- currentTime + rexp(1, lambda)
nextQuery.time <- toto + rexp(1, lambda)
print(currentTime)
time.current = 0
dropped[nextQuery.priority - 1] <- dropped[nextQuery.priority - 1] + 1
# Requêtes abandonnées, triées par priorité
dropped = c(0,0,0)
steps = 0
queueState <- c(time.duration)
nextService <- rexp(1, mu)
nextQuery.time <- -1
nextQuery.priority <- 0
# Retourne la taille effective de la queue
# Prenant en compte le nombre de serveurs.
effectiveQueue <- function() {
return (serverCapacity*serverCount)
}
query <- function(currentTime) {
prioritySelector <- runif(1)
if (prioritySelector < priorities[0]) {
nextQuery.priority <- 1
} else if (prioritySelector < (priorities[0] + priorities[1])) {
nextQuery.priority <- 2
} else {
nextQuery.priority <- 3
}
nextQuery.time <- currentTime + rexp(1, lambda)
}
service <- function(currentTime) {
for (i in priorities) {
if (queue[i-1] > 0) {
queue[i-1] <- queue[i-1] - 1
served[i-1] <- served[i-1] + 1
break
}
}
nextService.time <- currentTime + rexp(1, mu)
}
main <- function() {
query(time.current)
while (time.current < time.duration) {
if (time.current == nextQuery.time) {
# TODO (?) : traiter les requêtes de priorité supérieure à celles présentes dans la queue
if (sum(queue) >= effectiveQueue()) {
dropped[nextQuery.priority - 1] <- dropped[nextQuery.priority - 1] + 1
} else {
queue[nextQuery.priority - 1] <- queue[nextQuery.priority - 1] + 1
}
}
if (time.current == nextService.time) {
service(time.current)
}
# Sélection de l'étape suivante : un temps de service ou un temps de requête
if (nextQuery.time < nextService.time) {
time.current <- time.current + nextQuery.time
} else {
time.current <- time.current + nextService.time
}
queueState[step] <- sum(queue)
step = step + 1
}
print("Served")
print(served)
print("Dropped")
print(droppedQueries)
}
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
# Proportions Pi pour les probabilités des requêtes
priorities = c(0.3,0.3,0.4)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
time.current = time.current + nextQuery.time
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
# Some useful keyboard shortcuts for package authoring:
#
#   Build and Reload Package:  'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
# Paramètres
serverCapacity = 10
serverCount = 1
mu = 13
lambda = 10
time.duration = 100
# Proportions Pi pour les probabilités des requêtes
priorities = c(0.3,0.3,0.4)
time.current = 0
queue <- c(0,0,0)
launched <- c(0,0,0)
served <- c(0,0,0)
# Requêtes abandonnées, triées par priorité
dropped = c(0,0,0)
steps = 0
queueState = c(time.duration)
nextService <- rexp(1, mu)
nextQuery.time <- -1
nextQuery.priority <- 0
# Retourne la taille effective de la queue
# Prenant en compte le nombre de serveurs.
effectiveQueue <- function() {
return (serverCapacity*serverCount)
}
query <- function(currentTime) {
prioritySelector = runif(1)
if (prioritySelector < priorities[0]) {
nextQuery.priority <- 1
} else if (prioritySelector < (priorities[0] + priorities[1])) {
nextQuery.priority <- 2
} else {
nextQuery.priority <- 3
}
nextQuery.time <- currentTime + rexp(1, lambda)
}
service <- function(currentTime) {
for (i in priorities) {
if (queue[i-1] > 0) {
queue[i-1] <- queue[i-1] - 1
served[i-1] <- served[i-1] + 1
break
}
}
nextService.time = currentTime + rexp(1, mu)
}
main <- function() {
query(time.current)
while (time.current < time.duration) {
if (time.current == nextQuery.time) {
# TODO (?) : traiter les requêtes de priorité supérieure à celles présentes dans la queue
if (sum(queue) >= effectiveQueue()) {
dropped[nextQuery.priority - 1] <- dropped[nextQuery.priority - 1] + 1
} else {
queue[nextQuery.priority - 1] <- queue[nextQuery.priority - 1] + 1
}
}
if (time.current == nextService.time) {
service(time.current)
}
# Sélection de l'étape suivante : un temps de service ou un temps de requête
if (nextQuery.time < nextService.time) {
time.current = time.current + nextQuery.time
} else {
time.current = time.current + nextService.time
}
queueState[step] = sum(queue)
step = step + 1
}
print("Served")
print(served)
print("Dropped")
print(droppedQueries)
}
main()
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
print(paste("i",i))
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/hello.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
nextService.time <<- nextService.time + rexp(1, mu)
service = function() {
for (i in 1:length(priorities)) {
if (queue[i] > 0) {
queue[i] <<- queue[i] - 1
served[i] <<- served[i] + 1
break
}
}
nextService.time <<- nextService.time + rexp(1, mu)
}
main <- function() {
while (time.current < time.duration) {
if (time.current == nextQuery.time) {
query()
}
if (time.current == nextService.time) {
service()
}
# Sélection de l'étape suivante : un temps de service ou un temps de requête
if (nextQuery.time < nextService.time) {
time.current <<- nextQuery.time
} else {
time.current <<- nextService.time
}
queries <<- queries + sum(queue)
queueState[1,step] <<- queue[1]
queueState[2,step] <<- queue[2]
queueState[3,step] <<- queue[3]
queueState[4,step] <<- sum(queue)
step = step + 1
}
print("Served")
print(served)
print("Dropped")
print(dropped)
print('*****[INFO] Nombre moyen de requetes (simulé) :*****')
print(queries/step)
print('*****[INFO] Nombre moyen de requetes (théorique) :*****')
ro <- lambda/mu
Etx <- (((1-(ro^(effectiveQueue()-1))) / (1-ro)) - effectiveQueue()*(ro^(effectiveQueue()))) * (ro / (1-(ro^(effectiveQueue()+1))))
print(Etx)
print('*****[INFO] Taux de perte (simulé) :*****')
print(sum(dropped)/step)
print('*****[INFO] Taux de perte (théorique) :*****')
print(((1-ro)/(1-ro^(effectiveQueue()+1)))*ro^(effectiveQueue()))
plot(x=1:length(queueState[4,]), y=queueState[4,], type="l")
}
main()
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
plot(x=timeHistory, y=queueState, type="l")
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
unlink('Rapport_cache', recursive = TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R', echo=TRUE)
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
source('~/Documents/Cours/Probabilites/SimulationServeur/R/main.R')
